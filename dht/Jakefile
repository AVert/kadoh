//**************DEFAULT********************
desc('Say Hello to Kadoh');
task('default', [], function(){
  var exec  = require('child_process').exec;
  
  exec('cowsay Hello KadOH', function(error, stdout, stderr){
    if(stderr)
      console.log('Hello KadOH');
    else console.log(stdout);
    complete();
  });
  
}, true);

//**************BUILD*****************
desc('Building the embedded code');
task('build', ['default'], function(){
  
  var fs = require('fs')
    , ugly = require('uglify-js');

  var LIB_DIR = __dirname + '/lib/';
  var DIST_DIR = __dirname + '/dist/';

  // LIST here the files to embed
  var LIB = [
      'core/class'
    , 'util/crypto'
    , 'globals'
    , 'node'
    , 'routingtable'
    , 'kbucket'
    , 'peer'
  ];

  code = [];
  code_min = [];

  for(i in LIB) {

    var file = LIB[i] + '.js';
    var path = LIB_DIR + file;

    try {
      var content = fs.readFileSync(path, 'utf-8');

      code.push(content);

      var ast = ugly.parser.parse(content);
      ast = ugly.uglify.ast_mangle(ast)
      ast = ugly.uglify.ast_squeeze(ast)
      var min = ugly.uglify.gen_code(ast);

      code_min.push(min);

      console.log('Build : success in adding ' + file);
    }
    catch(err) {
      console.log('Build : unable to read ' + file); 
      console.log(err);
    }

  };

  fs.writeFileSync(DIST_DIR + 'KadOH.js', code.join('\n'), 'utf-8');
  console.log("Build : KadOH.js completed");

  fs.writeFileSync(DIST_DIR + 'KadOH.min.js', code_min.join('\n'), 'utf-8');
  console.log('Build : KadOH.min.js completed');
  
});

desc('Test the DHT libs');
task('test', ['build'], function() {
  proc = require('child_process');
  
  proc.exec('vows test/* --spec', function(err, stdout, stderr) {
    if (err) {
      console.error('!ERROR!');
      console.error(err.message);
    }
    else
      console.log(stdout);
  });
});